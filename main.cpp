#include "mbed.h"
#include "USBMIDI.h"

void beatPlay();
uint8_t beat = 0;
uint8_t midiMessages[320][3] = {{144, 36, 127}, {144, 49, 127}, {144, 38, 127}, {144, 36, 127}, {144, 49, 127}, {144, 49, 127}, {144, 38, 127}, {144, 49, 127}, {144, 36, 127}, {144, 49, 127}, {144, 38, 127}, {144, 36, 127}, {144, 49, 127}, {144, 36, 127}, {144, 38, 127}, {144, 49, 127}, {144, 36, 127}, {144, 49, 127}, {144, 38, 127}, {144, 36, 127}, {144, 49, 127}, {144, 49, 127}, {144, 38, 127}, {144, 49, 127}, {144, 36, 127}, {144, 49, 127}, {144, 38, 127}, {144, 36, 127}, {144, 49, 127}, {144, 36, 127}, {144, 38, 127}, {144, 49, 127}, {144, 49, 127}, {145, 53, 100}, {144, 49, 127}, {144, 49, 127}, {145, 53, 100}, {145, 53, 100}, {144, 49, 127}, {145, 53, 100}, {144, 49, 127}, {145, 50, 100}, {144, 49, 127}, {144, 49, 127}, {145, 55, 100}, {144, 49, 127}, {144, 49, 127}, {145, 55, 100}, {144, 49, 127}, {145, 57, 100}, {144, 49, 127}, {144, 49, 127}, {145, 55, 103}, {145, 55, 103}, {144, 49, 127}, {145, 55, 103}, {144, 49, 127}, {145, 57, 100}, {144, 49, 127}, {144, 49, 127}, {145, 57, 103}, {144, 49, 127}, {144, 49, 127}, {145, 52, 103}, {145, 53, 100}, {0, 0, 0}, {145, 53, 100}, {145, 53, 100}, {0, 0, 0}, {148, 76, 110}, {145, 53, 100}, {0, 0, 0}, {145, 50, 100}, {0, 0, 0}, {145, 55, 100}, {145, 55, 100}, {0, 0, 0}, {145, 55, 100}, {145, 55, 100}, {0, 0, 0}, {145, 57, 100}, {0, 0, 0}, {145, 57, 100}, {145, 57, 100}, {146, 43, 125}, {148, 72, 110}, {145, 55, 103}, {146, 45, 125}, {145, 57, 100}, {0, 0, 0}, {145, 57, 100}, {145, 57, 100}, {148, 72, 110}, {145, 52, 103}, {145, 52, 103}, {148, 69, 110}, {146, 41, 127}, {0, 0, 0}, {148, 76, 110}, {148, 74, 110}, {0, 0, 0}, {0, 0, 0}, {148, 74, 110}, {0, 0, 0}, {146, 38, 127}, {0, 0, 0}, {146, 43, 127}, {148, 74, 110}, {0, 0, 0}, {148, 72, 110}, {148, 76, 110}, {0, 0, 0}, {146, 45, 127}, {0, 0, 0}, {148, 69, 110}, {148, 69, 110}, {147, 59, 127}, {0, 0, 0}, {148, 74, 110}, {0, 0, 0}, {147, 60, 127}, {0, 0, 0}, {148, 74, 110}, {148, 74, 110}, {0, 0, 0}, {146, 40, 125}, {0, 0, 0}, {0, 0, 0}, {147, 57, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 57, 127}, {0, 0, 0}, {147, 59, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 60, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 55, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 57, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 55, 127}, {0, 0, 0}, {0, 0, 0}, {147, 53, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 53, 127}, {0, 0, 0}, {147, 55, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 57, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 50, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 52, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 52, 127}, {0, 0, 0}, {0, 0, 0}, {147, 48, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 48, 127}, {0, 0, 0}, {147, 50, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 52, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 43, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 45, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 48, 127}, {0, 0, 0}, {0, 0, 0}, {147, 41, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 41, 127}, {0, 0, 0}, {147, 43, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 45, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {148, 72, 110}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {148, 76, 110}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 40, 127}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {148, 72, 110}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {148, 71, 110}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
uint8_t offMessages[320][3] = {{144, 49, 0}, {144, 36, 0}, {144, 49, 0}, {144, 38, 0}, {144, 36, 0}, {144, 49, 0}, {144, 49, 0}, {144, 38, 0}, {144, 49, 0}, {144, 36, 0}, {144, 49, 0}, {144, 38, 0}, {144, 36, 0}, {144, 49, 0}, {144, 36, 0}, {144, 38, 0}, {144, 49, 0}, {144, 36, 0}, {144, 49, 0}, {144, 38, 0}, {144, 36, 0}, {144, 49, 0}, {144, 49, 0}, {144, 38, 0}, {144, 49, 0}, {144, 36, 0}, {144, 49, 0}, {144, 38, 0}, {144, 36, 0}, {144, 49, 0}, {144, 36, 0}, {144, 38, 0}, {145, 52, 0}, {144, 49, 0}, {145, 53, 0}, {144, 49, 0}, {144, 49, 0}, {145, 53, 0}, {145, 53, 0}, {144, 49, 0}, {145, 53, 0}, {144, 49, 0}, {145, 50, 0}, {144, 49, 0}, {144, 49, 0}, {145, 55, 0}, {144, 49, 0}, {144, 49, 0}, {145, 55, 0}, {144, 49, 0}, {145, 57, 0}, {144, 49, 0}, {144, 49, 0}, {145, 55, 0}, {145, 55, 0}, {144, 49, 0}, {145, 55, 0}, {144, 49, 0}, {145, 57, 0}, {144, 49, 0}, {144, 49, 0}, {145, 57, 0}, {144, 49, 0}, {144, 49, 0}, {146, 40, 0}, {145, 53, 0}, {0, 0, 0}, {145, 53, 0}, {145, 53, 0}, {148, 74, 0}, {148, 76, 0}, {145, 53, 0}, {146, 41, 0}, {145, 50, 0}, {146, 38, 0}, {145, 55, 0}, {145, 55, 0}, {148, 74, 0}, {145, 55, 0}, {145, 55, 0}, {146, 43, 0}, {145, 57, 0}, {0, 0, 0}, {145, 57, 0}, {145, 57, 0}, {148, 72, 0}, {148, 72, 0}, {145, 55, 0}, {147, 59, 0}, {145, 57, 0}, {148, 76, 0}, {145, 57, 0}, {145, 57, 0}, {146, 45, 0}, {145, 52, 0}, {145, 52, 0}, {147, 55, 0}, {0, 0, 0}, {0, 0, 0}, {148, 76, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 57, 0}, {147, 57, 0}, {0, 0, 0}, {148, 72, 0}, {0, 0, 0}, {0, 0, 0}, {148, 72, 0}, {0, 0, 0}, {147, 59, 0}, {0, 0, 0}, {0, 0, 0}, {148, 69, 0}, {146, 45, 0}, {0, 0, 0}, {0, 0, 0}, {146, 43, 0}, {147, 55, 0}, {0, 0, 0}, {0, 0, 0}, {148, 74, 0}, {148, 74, 0}, {147, 60, 0}, {148, 71, 0}, {0, 0, 0}, {147, 52, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 53, 0}, {147, 53, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 55, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 60, 0}, {0, 0, 0}, {0, 0, 0}, {148, 74, 0}, {147, 50, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 57, 0}, {0, 0, 0}, {0, 0, 0}, {147, 48, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 48, 0}, {147, 48, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 50, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 57, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 43, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 52, 0}, {0, 0, 0}, {0, 0, 0}, {147, 40, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 41, 0}, {147, 41, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 43, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 52, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 45, 0}, {0, 0, 0}, {0, 0, 0}, {148, 69, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {148, 74, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {148, 76, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {147, 45, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {148, 72, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {148, 69, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
uint16_t tempo[] = {0,230};
uint32_t control = 0xFFFFFFFF;
uint8_t channels[16] = {50, 32, 7, 28, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
/*
class MIDITimer {
public:
    MIDITimer() : _running(false), _interval(0) {}

    void start(us_timestamp_t interval) {
        _interval = interval;
        _running = true;
        _ticker.attach_us(callback(this, &MIDITimer::timeout), _interval);
    }

    void stop() {
        _running = false;
        _ticker.detach();
    }

    bool is_running() const {
        return _running;
    }

    void timeout(){
        beat ++;
        if (beat == 32) {
            beat = 0;
        }
        beatPlay();
    }

private:
    bool _running;
    us_timestamp_t _interval;
    Ticker _ticker;
};
*/

USBMIDI midi;
Timer timer;


void beatPlay(){
    uint16_t index;
    uint32_t beatMask = 0x80000000 >> beat;
    if ((control & beatMask) == 0){
        return;
    }
    for(int i = 0; i < 10; i++){
        index = i * 32 + beat;
        if (offMessages[index][0] != 0){
            midi.write(MIDIMessage::NoteOn(offMessages[index][1], offMessages[index][2], offMessages[index][0] & 0xF));
        }
    }
    for(int i = 0; i < 10; i++){
        index = i * 32 + beat;
        if (midiMessages[index][0] != 0){
            midi.write(MIDIMessage::NoteOn(midiMessages[index][1], midiMessages[index][2], midiMessages[index][0] & 0xF));
        }
    }
}


void allNotesOff(){
    for(int i = 0; i < 16; i++){
        if (channels[i] != 0){
            midi.write(MIDIMessage::AllNotesOff(i));
        }
    }
}

void timeout(){
    beat ++;
    if (beat == 32) {
        beat = 0;
    }
    beatPlay();
}

int main()
{
    // Give the USB a moment to initialize and enumerate
    while (!midi.ready()) {
        ThisThread::sleep_for(100ms);
    }
    // Set and Attach Trigger
    uint64_t  lastTime = 0;
    timer.start();
    while (true) {
        // TODO: Ver Botones
        uint64_t currentTime = timer.elapsed_time().count();
        if (currentTime - lastTime >= static_cast<uint64_t>((60.0 * 1'000'000) / tempo[1])) {
            lastTime = currentTime;
            timeout();
        }
        /*
       beatPlay();
       ThisThread::sleep_for(261ms); // Adjust the sleep duration as needed
       beat++;
       if (beat == 32) {
           beat = 0;
       }*/
    }
}